package hellojpa;



import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Date;

@Getter
@Setter
@Entity
@SequenceGenerator(  //hibernate_sequence라는 임의의 시퀀스로 생성되는데 별도의 이름을 주고 싶을 때 사용
        name = "MEMBER_SEQ_GENERATOR",
        sequenceName = "MEMBER_SEQ",
        initialValue = 1, allocationSize = 50)
//@TableGenerator(
//        name = "MEMBER_SEQ_GENERATOR",
//        table = "MY_SEQUENCES",
//        pkColumnValue = "MEMBER_SEQ", allocationSize = 1)
//매핑할 데이터베이스 시퀀스 이름
public class Member {

    //    @GeneratedValue(strategy = GenerationType.AUTO) // DB방언에 맞춰서 자동생성

//    @GeneratedValue(strategy = GenerationType.IDENTITY) // 기본 키 생성을 데이터베이스에 위임
//     generated by default as identity  insert into Member (id, name)  values (null, ?)

//    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "MEMBER_SEQ_GENERATOR")
    // 유일한 값을 순서대로 생성하는 특별한 DB 오브젝트(예: 오라클 시퀀스)
//      create sequence hibernate_sequence start with 1 increment by 1

    //    @GeneratedValue(strategy = GenerationType.TABLE, generator = "MEMBER_SEQ_GENERATOR")
    //  키 생성 전용 테이블을 하나 만들어서 DB 시퀀스를 흉내내는 전략
//   create table MY_SEQUENCES (
//       sequence_name varchar(255) not null,
//        next_val bigint,
//        primary key (sequence_name)
//    )

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "MEMBER_SEQ_GENERATOR")
    private Long id;


    @Column(name = "name", nullable = false)
    private String username;

    public Member() {   // 기본생성자가 있어야함
    }

}
